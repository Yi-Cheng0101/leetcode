class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> subset;
        // recursive func
        // org vector, next level, number of nums, ans
        dfs(nums, 0, subset, res);
        return res; 
    }

    void dfs(const vector<int> &nums, int level, vector<int>&
    subset, vector<vector<int>>& res){
        // end condition 
        if(level == nums.size()){
            res.push_back(subset);
            return ;
        }
        // select
        subset.push_back(nums[level]);
        dfs(nums, level + 1, subset, res);
        // don't select
        subset.pop_back();
        dfs(nums, level + 1, subset, res);
    }
};


class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        // nums, current idx, 
        vector<vector<int>> ans;
        vector<int> res;
        backtrack(nums, 0, res, ans);
        return ans;
    }

    void backtrack(vector<int>& nums, int idx, vector<int>& res, vector<vector<int>>& ans){
        // end condition
        if(idx == nums.size()){
            ans.push_back(res);
            return ;
        } 
        // select
        res.push_back(nums[idx]);
        backtrack(nums, idx+1, res, ans);
        // not select
        res.pop_back();
        backtrack(nums, idx+1, res, ans);
    }
};
